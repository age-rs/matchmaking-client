mod server;

use std::process::Command;
use std::path::PathBuf;
use std::io::{Error as IOError, ErrorKind as IOErrorKind};
use tokio::io::Result;
use tokio::prelude::*;
use tokio_process::{Child, CommandExt};
use crate::server::HostServer;

/// GUID structure, for identifying DirectPlay interfaces, applications, and address types.
#[derive(Clone, Copy)]
pub struct GUID(pub u32, pub u16, pub u16, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8);

impl std::fmt::Display for GUID {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{{{:08X?}-{:04X?}-{:04x?}-{:02X?}{:02X?}-{:02X?}{:02X?}{:02X?}{:02X?}{:02X?}{:02X?}}}",
               self.0,
               self.1,
               self.2,
               self.3, self.4,
               self.5, self.6, self.7, self.8, self.9, self.10)
    }
}

/// The type of DirectPlay session to create; either joining or hosting a session.
#[derive(Clone, Copy)]
enum SessionType {
    /// Host a DirectPlay session. Optionally specify a GUID for the session; if none is given, a
    /// random one is generated by DPRun.
    Host(Option<GUID>),
    /// Join a DirectPlay session.
    Join(GUID),
}

/// Represents a part of a DirectPlay address, akin to DPCOMPOUNDADDRESSELEMENT in the DirectPlay
/// C API.
pub enum DPAddressPart {
    /// A DirectPlay address part with a numeric value.
    Number(GUID, i32),
    /// A DirectPlay address part with a string value.
    String(GUID, String),
    /// A DirectPlay address part with a binary value.
    Binary(GUID, Vec<u8>),
}

#[derive(Default)]
pub struct DPRunOptionsBuilder {
    session_type: Option<SessionType>,
    player_name: Option<String>,
    service_provider: Option<GUID>,
    application: Option<GUID>,
    address: Vec<DPAddressPart>,
    session_name: Option<String>,
    session_password: Option<String>,
    cwd: Option<PathBuf>,
}

pub struct DPRunOptions {
    session_type: SessionType,
    player_name: String,
    service_provider: GUID,
    application: GUID,
    address: Vec<DPAddressPart>,
    session_name: Option<String>,
    session_password: Option<String>,
    cwd: Option<PathBuf>,
}

impl DPRunOptions {
    /// Create options for dprun.
    pub fn new() -> DPRunOptionsBuilder {
        DPRunOptionsBuilder::default()
    }
}

impl DPRunOptionsBuilder {
    /// Host a DirectPlay session. Optionally specify a GUID for the session; if none is given, a
    /// random one is generated by DPRun.
    pub fn host(self, session_id: Option<GUID>) -> Self {
        Self { session_type: Some(SessionType::Host(session_id)), ..self }
    }

    /// Join a session.
    pub fn join(self, session_id: GUID) -> Self {
        Self { session_type: Some(SessionType::Join(session_id)), ..self }
    }

    /// Set the in-game name of the local player.
    pub fn player_name(self, player_name: String) -> Self {
        Self { player_name: Some(player_name), ..self }
    }

    /// Set the service provider to use.
    pub fn service_provider(self, service_provider: GUID) -> Self {
        Self { service_provider: Some(service_provider), ..self }
    }

    /// Set the application to start.
    pub fn application(self, application: GUID) -> Self {
        Self { application: Some(application), ..self }
    }

    /// Set the name of the session (optional).
    pub fn session_name(self, session_name: String) -> Self {
        Self { session_name: Some(session_name), ..self }
    }

    /// Password protect the session (optional).
    pub fn session_password(self, session_password: String) -> Self {
        Self { session_password: Some(session_password), ..self }
    }

    /// Set the directory dprun is in (optional, defaults to current working directory).
    pub fn cwd(self, cwd: PathBuf) -> Self {
        Self { cwd: Some(cwd), ..self }
    }

    /// Add an address part.
    pub fn address_part(mut self, part: DPAddressPart) -> Self {
        self.address.push(part);
        self
    }

    /// Check the options and build the DPRunOptions struct.
    pub fn finish(self) -> DPRunOptions {
        assert!(self.session_type.is_some());
        assert!(self.player_name.is_some());
        assert!(self.service_provider.is_some());
        assert!(self.application.is_some());

        DPRunOptions {
            session_type: self.session_type.unwrap(),
            player_name: self.player_name.unwrap(),
            service_provider: self.service_provider.unwrap(),
            application: self.application.unwrap(),
            address: self.address,
            session_name: self.session_name,
            session_password: self.session_password,
            cwd: self.cwd,
        }
    }
}

/// Represents a dprun game session.
pub struct DPRun {
    command: Command,
    process: Option<Child>,
}

impl DPRun {
    /// Get the command that will be executed (for debugging).
    pub fn command(&self) -> String {
        format!("{:?}", self.command)
    }

    /// Start dprun.
    pub fn start(mut self) -> Result<impl Future<Item = (), Error = IOError>> {
        let server = HostServer::new(2197);
        let (server, token) = server.start()?;
        let child = self.command.spawn_async()?.and_then(|result| {
            if result.success() {
                return future::finished(());
            }
            future::err(IOError::new(IOErrorKind::Other, format!("dprun exited with status {}", result.code().unwrap_or(0))))
        }).then(move |result| {
            println!("waiting for host server to shut down...");
            token.stop();
            result
        });
        Ok(child.join(server).map(|_| ()))
    }
}

pub fn run(options: DPRunOptions) -> DPRun {
    let mut command = if cfg!(target_os = "windows") {
        Command::new("dprun.exe")
    } else {
        let mut wine = Command::new("wine");
        wine.arg("dprun.exe");
        wine
    };

    if let Some(cwd) = options.cwd {
        command.current_dir(cwd);
    }

    match options.session_type {
        SessionType::Host(Some(guid)) => {
            command.args(&["--host", &guid.to_string()])
        },
        SessionType::Host(None) => {
            command.arg("--host")
        },
        SessionType::Join(guid) => {
            command.args(&["--join", &guid.to_string()])
        },
    };

    command.args(&[
        "--player", &options.player_name,
        "--service-provider", &options.service_provider.to_string(),
        "--application", &options.application.to_string(),
    ]);

    for part in options.address {
        let value = match part {
            DPAddressPart::Number(guid, val) => format!("{}=i:{}", &guid.to_string(), val),
            DPAddressPart::String(guid, val) => format!("{}={}", &guid.to_string(), val),
            DPAddressPart::Binary(guid, val) => format!("{}=b:{}",
                &guid.to_string(),
                val.iter().map(|c| format!("{:02x}", c)).collect::<String>()),
        };
        command.args(&["--address", &value]);
    }

    if let Some(name) = options.session_name {
        command.args(&["--session-name", &name]);
    }

    if let Some(password) = options.session_password {
        command.args(&["--session-password", &password]);
    }

    DPRun {
        command,
        process: None,
    }
}

#[cfg(test)]
mod tests {
    use crate::{run, DPAddressPart, DPRunOptions, GUID};

    #[test]
    fn build_command_line_args() {
        let dpchat = GUID(0x5BFDB060, 0x06A4, 0x11D0, 0x9C, 0x4F, 0x00, 0xA0, 0xC9, 0x05, 0x42, 0x5E);
        let tcpip = GUID(0x36E95EE0, 0x8577, 0x11cf, 0x96, 0x0c, 0x00, 0x80, 0xc7, 0x53, 0x4e, 0x82);
        let inet = GUID(0xc4a54da0, 0xe0af, 0x11cf, 0x9c, 0x4e, 0x00, 0xa0, 0xc9, 0x05, 0x42, 0x5e);
        let inet_port = GUID(0xe4524541, 0x8ea5, 0x11d1, 0x8a, 0x96, 0x00, 0x60, 0x97, 0xb0, 0x14, 0x11);

        let options = DPRunOptions::new()
            .host(None)
            .player_name("Test".into())
            .application(dpchat)
            .service_provider(tcpip)
            .address_part(DPAddressPart::String(inet, "127.0.0.1".into()))
            .address_part(DPAddressPart::Number(inet_port, 2197))
            .finish();

        let dp_run = run(options);
        if cfg!(target_os = "windows") {
            assert_eq!(dp_run.command(), r#""dprun.exe" "--host" "--player" "Test" "--service-provider" "{36E95EE0-8577-11cf-960C-0080C7534E82}" "--application" "{5BFDB060-06A4-11d0-9C4F-00A0C905425E}" "--address" "{C4A54DA0-E0AF-11cf-9C4E-00A0C905425E}=127.0.0.1" "--address" "{E4524541-8EA5-11d1-8A96-006097B01411}=i:2197""#);
        } else {
            assert_eq!(dp_run.command(), r#""wine" "dprun.exe" "--host" "--player" "Test" "--service-provider" "{36E95EE0-8577-11cf-960C-0080C7534E82}" "--application" "{5BFDB060-06A4-11d0-9C4F-00A0C905425E}" "--address" "{C4A54DA0-E0AF-11cf-9C4E-00A0C905425E}=127.0.0.1" "--address" "{E4524541-8EA5-11d1-8A96-006097B01411}=i:2197""#);
        }
    }
}
